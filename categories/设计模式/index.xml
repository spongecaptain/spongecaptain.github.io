<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on Spongecaptain 的个人技术博客</title>
    <link>https://spongecaptain.cool/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on Spongecaptain 的个人技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Spongecaptain</copyright>
    <lastBuildDate>Fri, 14 Jan 2022 11:58:07 +0800</lastBuildDate><atom:link href="https://spongecaptain.cool/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>五分钟理解软件架构模式（译文）</title>
      <link>https://spongecaptain.cool/post/patterndesign/software-architecture-patterns-5-mins-read/</link>
      <pubDate>Fri, 14 Jan 2022 11:58:07 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/patterndesign/software-architecture-patterns-5-mins-read/</guid>
      <description>说明：本文翻译于：Software Architecture Patterns: 5 minute read 当一个人深入软件工程的世界时，总有一天他需要学习软件架构模式的基础知识。当我刚开始编码的时候，我</description>
    </item>
    
    <item>
      <title>Java 的代理模式的实现</title>
      <link>https://spongecaptain.cool/post/java/proxypattern/</link>
      <pubDate>Wed, 22 Jul 2020 20:56:48 +0800</pubDate>
      
      <guid>https://spongecaptain.cool/post/java/proxypattern/</guid>
      <description>关于 Java 的代理技术，我写了一个开源库，推荐对具体实现有兴趣的同学去看看： https://github.com/Spongecaptain/ProxyPatternInJava 1. 为类的方法添加第三方功能-朴素方式 这里提到的第三方功能类似于软件的</description>
    </item>
    
  </channel>
</rss>
